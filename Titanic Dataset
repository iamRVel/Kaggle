{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir('C:\\\\Users\\HP\\\\.ipynb_checkpoints\\\\all') # Set working directory\n",
    "\n",
    "titanic_train = pd.read_csv(\"train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      "PassengerId    891 non-null int64\n",
      "Survived       891 non-null int64\n",
      "Pclass         891 non-null int64\n",
      "Name           891 non-null object\n",
      "Sex            891 non-null object\n",
      "Age            714 non-null float64\n",
      "SibSp          891 non-null int64\n",
      "Parch          891 non-null int64\n",
      "Ticket         891 non-null object\n",
      "Fare           891 non-null float64\n",
      "Cabin          204 non-null object\n",
      "Embarked       889 non-null object\n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.6+ KB\n"
     ]
    }
   ],
   "source": [
    "titanic_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "687"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(titanic_train['Cabin'].isnull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "177"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(titanic_train['Age'].isnull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "204"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(titanic_train['Cabin'].notnull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.00</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                                      Name  \\\n",
       "888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n",
       "889          890         1       1                     Behr, Mr. Karl Howell   \n",
       "890          891         0       3                       Dooley, Mr. Patrick   \n",
       "\n",
       "        Sex   Age  SibSp  Parch      Ticket   Fare Cabin Embarked  \n",
       "888  female   NaN      1      2  W./C. 6607  23.45   NaN        S  \n",
       "889    male  26.0      0      0      111369  30.00  C148        C  \n",
       "890    male  32.0      0      0      370376   7.75   NaN        Q  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.tail(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "Cat = titanic_train.dtypes[titanic_train.dtypes == 'object'].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>204</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "      <td>681</td>\n",
       "      <td>147</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Hirvonen, Miss. Hildur E</td>\n",
       "      <td>male</td>\n",
       "      <td>347082</td>\n",
       "      <td>G6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>577</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Name   Sex  Ticket Cabin Embarked\n",
       "count                        891   891     891   204      889\n",
       "unique                       891     2     681   147        3\n",
       "top     Hirvonen, Miss. Hildur E  male  347082    G6        S\n",
       "freq                           1   577       7     4      644"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train[Cat].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    891.000000\n",
       "mean       0.383838\n",
       "std        0.486592\n",
       "min        0.000000\n",
       "25%        0.000000\n",
       "50%        0.000000\n",
       "75%        1.000000\n",
       "max        1.000000\n",
       "Name: Survived, dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.Survived.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "nuw_sur = pd.Categorical(titanic_train['Survived'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic_train.Survived = nuw_sur.rename_categories(['Died','Survived'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count      891\n",
       "unique       2\n",
       "top       Died\n",
       "freq       549\n",
       "Name: Survived, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.Survived.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Died        549\n",
       "Survived    342\n",
       "Name: Survived, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.Survived.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x206847a7400>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "titanic_train.Age.hist(bins = 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20684dcec18>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "titanic_train.Fare.hist(bins=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20684738048>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "titanic_train.boxplot(column='Fare', vert = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
       "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x206866a7dd8>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "titanic_train.boxplot(column='Age', by=\"Sex\", vert = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x206866c1da0>"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "titanic_train.boxplot(column='Fare', by=\"Sex\", vert = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = pd.crosstab(titanic_train.Sex, titanic_train.Embarked)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20687931978>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "temp.plot(kind='bar', stacked = True, color = ['red','green','blue'], grid=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.apply(lambda x: sum(x.isnull()), axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic_test = pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                              Name     Sex   Age  SibSp  \\\n",
       "0          892       3                  Kelly, Mr. James    male  34.5      0   \n",
       "1          893       3  Wilkes, Mrs. James (Ellen Needs)  female  47.0      1   \n",
       "2          894       2         Myles, Mr. Thomas Francis    male  62.0      0   \n",
       "\n",
       "   Parch  Ticket    Fare Cabin Embarked  \n",
       "0      0  330911  7.8292   NaN        Q  \n",
       "1      0  363272  7.0000   NaN        S  \n",
       "2      0  240276  9.6875   NaN        Q  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_test.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 11 columns):\n",
      "PassengerId    418 non-null int64\n",
      "Pclass         418 non-null int64\n",
      "Name           418 non-null object\n",
      "Sex            418 non-null object\n",
      "Age            332 non-null float64\n",
      "SibSp          418 non-null int64\n",
      "Parch          418 non-null int64\n",
      "Ticket         418 non-null object\n",
      "Fare           417 non-null float64\n",
      "Cabin          91 non-null object\n",
      "Embarked       418 non-null object\n",
      "dtypes: float64(2), int64(4), object(5)\n",
      "memory usage: 36.0+ KB\n"
     ]
    }
   ],
   "source": [
    "titanic_test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>418.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>332.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>417.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1100.500000</td>\n",
       "      <td>2.265550</td>\n",
       "      <td>30.272590</td>\n",
       "      <td>0.447368</td>\n",
       "      <td>0.392344</td>\n",
       "      <td>35.627188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>120.810458</td>\n",
       "      <td>0.841838</td>\n",
       "      <td>14.181209</td>\n",
       "      <td>0.896760</td>\n",
       "      <td>0.981429</td>\n",
       "      <td>55.907576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>892.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.170000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>996.250000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.895800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1100.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1204.750000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1309.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId      Pclass         Age       SibSp       Parch        Fare\n",
       "count   418.000000  418.000000  332.000000  418.000000  418.000000  417.000000\n",
       "mean   1100.500000    2.265550   30.272590    0.447368    0.392344   35.627188\n",
       "std     120.810458    0.841838   14.181209    0.896760    0.981429   55.907576\n",
       "min     892.000000    1.000000    0.170000    0.000000    0.000000    0.000000\n",
       "25%     996.250000    1.000000   21.000000    0.000000    0.000000    7.895800\n",
       "50%    1100.500000    3.000000   27.000000    0.000000    0.000000   14.454200\n",
       "75%    1204.750000    3.000000   39.000000    1.000000    0.000000   31.500000\n",
       "max    1309.000000    3.000000   76.000000    8.000000    9.000000  512.329200"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_test.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age             86\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             1\n",
       "Cabin          327\n",
       "Embarked         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_test.apply(lambda x: sum(x.isnull()), axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'missingno'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-76-74f8e347f364>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mmissingno\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mmsno\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'missingno'"
     ]
    }
   ],
   "source": [
    "import missingno as msno #How to install this missingno library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.035144</td>\n",
       "      <td>0.036847</td>\n",
       "      <td>-0.057527</td>\n",
       "      <td>-0.001652</td>\n",
       "      <td>0.012658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>-0.035144</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.369226</td>\n",
       "      <td>0.083081</td>\n",
       "      <td>0.018443</td>\n",
       "      <td>-0.549500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0.036847</td>\n",
       "      <td>-0.369226</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.308247</td>\n",
       "      <td>-0.189119</td>\n",
       "      <td>0.096067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>-0.057527</td>\n",
       "      <td>0.083081</td>\n",
       "      <td>-0.308247</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.414838</td>\n",
       "      <td>0.159651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>-0.001652</td>\n",
       "      <td>0.018443</td>\n",
       "      <td>-0.189119</td>\n",
       "      <td>0.414838</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.216225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0.012658</td>\n",
       "      <td>-0.549500</td>\n",
       "      <td>0.096067</td>\n",
       "      <td>0.159651</td>\n",
       "      <td>0.216225</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             PassengerId    Pclass       Age     SibSp     Parch      Fare\n",
       "PassengerId     1.000000 -0.035144  0.036847 -0.057527 -0.001652  0.012658\n",
       "Pclass         -0.035144  1.000000 -0.369226  0.083081  0.018443 -0.549500\n",
       "Age             0.036847 -0.369226  1.000000 -0.308247 -0.189119  0.096067\n",
       "SibSp          -0.057527  0.083081 -0.308247  1.000000  0.414838  0.159651\n",
       "Parch          -0.001652  0.018443 -0.189119  0.414838  1.000000  0.216225\n",
       "Fare            0.012658 -0.549500  0.096067  0.159651  0.216225  1.000000"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.629630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.472826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.242363</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Survived\n",
       "Pclass          \n",
       "1       0.629630\n",
       "2       0.472826\n",
       "3       0.242363"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train[['Pclass', 'Survived']].groupby('Pclass').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>female</th>\n",
       "      <td>0.742038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>0.188908</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Survived\n",
       "Sex             \n",
       "female  0.742038\n",
       "male    0.188908"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train[['Sex','Survived']].groupby('Sex').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      "PassengerId    891 non-null int64\n",
      "Survived       891 non-null category\n",
      "Pclass         891 non-null int64\n",
      "Name           891 non-null object\n",
      "Sex            891 non-null object\n",
      "Age            714 non-null float64\n",
      "SibSp          891 non-null int64\n",
      "Parch          891 non-null int64\n",
      "Ticket         891 non-null object\n",
      "Fare           891 non-null float64\n",
      "Cabin          204 non-null object\n",
      "Embarked       889 non-null object\n",
      "dtypes: category(1), float64(2), int64(4), object(5)\n",
      "memory usage: 77.6+ KB\n"
     ]
    }
   ],
   "source": [
    "titanic_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic_train.Survived = nuw_sur.rename_categories([0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic_train.Survived = titanic_train.Survived.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      "PassengerId    891 non-null int64\n",
      "Survived       891 non-null int32\n",
      "Pclass         891 non-null int64\n",
      "Name           891 non-null object\n",
      "Sex            891 non-null object\n",
      "Age            714 non-null float64\n",
      "SibSp          891 non-null int64\n",
      "Parch          891 non-null int64\n",
      "Ticket         891 non-null object\n",
      "Fare           891 non-null float64\n",
      "Cabin          204 non-null object\n",
      "Embarked       889 non-null object\n",
      "dtypes: float64(2), int32(1), int64(4), object(5)\n",
      "memory usage: 80.1+ KB\n"
     ]
    }
   ],
   "source": [
    "titanic_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([nan, 'C85', 'C123', 'E46', 'G6', 'C103', 'D56', 'A6',\n",
       "       'C23 C25 C27', 'B78', 'D33', 'B30', 'C52', 'B28', 'C83', 'F33',\n",
       "       'F G73', 'E31', 'A5', 'D10 D12', 'D26', 'C110', 'B58 B60', 'E101',\n",
       "       'F E69', 'D47', 'B86', 'F2', 'C2', 'E33', 'B19', 'A7', 'C49', 'F4',\n",
       "       'A32', 'B4', 'B80', 'A31', 'D36', 'D15', 'C93', 'C78', 'D35',\n",
       "       'C87', 'B77', 'E67', 'B94', 'C125', 'C99', 'C118', 'D7', 'A19',\n",
       "       'B49', 'D', 'C22 C26', 'C106', 'C65', 'E36', 'C54',\n",
       "       'B57 B59 B63 B66', 'C7', 'E34', 'C32', 'B18', 'C124', 'C91', 'E40',\n",
       "       'T', 'C128', 'D37', 'B35', 'E50', 'C82', 'B96 B98', 'E10', 'E44',\n",
       "       'A34', 'C104', 'C111', 'C92', 'E38', 'D21', 'E12', 'E63', 'A14',\n",
       "       'B37', 'C30', 'D20', 'B79', 'E25', 'D46', 'B73', 'C95', 'B38',\n",
       "       'B39', 'B22', 'C86', 'C70', 'A16', 'C101', 'C68', 'A10', 'E68',\n",
       "       'B41', 'A20', 'D19', 'D50', 'D9', 'A23', 'B50', 'A26', 'D48',\n",
       "       'E58', 'C126', 'B71', 'B51 B53 B55', 'D49', 'B5', 'B20', 'F G63',\n",
       "       'C62 C64', 'E24', 'C90', 'C45', 'E8', 'B101', 'D45', 'C46', 'D30',\n",
       "       'E121', 'D11', 'E77', 'F38', 'B3', 'D6', 'B82 B84', 'D17', 'A36',\n",
       "       'B102', 'B69', 'E49', 'C47', 'D28', 'E17', 'A24', 'C50', 'B42',\n",
       "       'C148'], dtype=object)"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.Cabin.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "char_cab = titanic_train.Cabin.astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_cab = np.array([cabin[0] for cabin in char_cab]) #take first letter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic_train['new_cab'] = pd.Categorical(new_cab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
       "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'new_cab'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 13 columns):\n",
      "PassengerId    891 non-null int64\n",
      "Survived       891 non-null int32\n",
      "Pclass         891 non-null int64\n",
      "Name           891 non-null object\n",
      "Sex            891 non-null object\n",
      "Age            714 non-null float64\n",
      "SibSp          891 non-null int64\n",
      "Parch          891 non-null int64\n",
      "Ticket         891 non-null object\n",
      "Fare           891 non-null float64\n",
      "Cabin          204 non-null object\n",
      "Embarked       889 non-null object\n",
      "new_cab        891 non-null category\n",
      "dtypes: category(1), float64(2), int32(1), int64(4), object(5)\n",
      "memory usage: 81.4+ KB\n"
     ]
    }
   ],
   "source": [
    "titanic_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>new_cab</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>n</th>\n",
       "      <td>206</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Survived\n",
       "new_cab          \n",
       "A               7\n",
       "B              35\n",
       "C              35\n",
       "D              25\n",
       "E              24\n",
       "F               8\n",
       "G               2\n",
       "T               0\n",
       "n             206"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train[['Survived', 'new_cab']].groupby('new_cab').sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    549\n",
       "1    342\n",
       "Name: Survived, dtype: int64"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.Survived.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "age_sur = titanic_train.loc[titanic_train.Survived == 1]['Age'].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "age_died = titanic_train.loc[titanic_train.Survived == 0]['Age'].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\HP\\Anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[(0, 0.05), (0, 100)]"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = sns.kdeplot(age_sur, label = 'Survived', clip = [0,80])\n",
    "sns.kdeplot(age_died, label = 'Not Survived')\n",
    "fig.set(xlim = (0,100), ylim = (0,.05))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
